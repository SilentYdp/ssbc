package main

import (
	"fmt"
	"io"
	"io/ioutil"
	"net/http"
	"os"
	"regexp"
	"strconv"
	"strings"
	"time"
)


var (
	regHref       = `((ht|f)tps?)://[w]{0,3}.baidu.com/link\?[a-zA-z=0-9-\s]*`
)package main

import (
	"fmt"
	"io/ioutil"
	"net/http"
	"os"
	"regexp"
	"time"
	"strings"
)


var (
	urls = []string{}
	sourceCode =[]string{}
)

func main() {
	fistStart()
	for _,u := range urls{
		getSource("http://etherscan.io"+u)
	}
	for _,k := range sourceCode{
		fmt.Println("ETH sourceCode:")
		fmt.Println(k)
	}


}
func getSource(url string){
	fmt.Println("Geting ",url,"SourceCode")
	resp, err := http.Get(url)
	if err != nil{
		fmt.Println(err)
		return
	}
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)

	reg := regexp.MustCompile(`top: 5px;'>(?s:(.*?))</pre><br><script>`)
	result := reg.FindAllString(string(body),-1)
	for i:=0;i<len(result);i++{
		result[i] = strings.TrimLeft(result[i],"top: 5px;'>")
		result[i] = strings.TrimRight(result[i],"</pre><br><script>")
	}
	sourceCode = append(sourceCode, result...)
}
func fistStart() {

	url := "http://etherscan.io/contractsVerified"
	resp, _ := http.Get(url)
	defer resp.Body.Close()
	body, _ := ioutil.ReadAll(resp.Body)
	fmt.Println(string(body))
	reg := regexp.MustCompile(`/address/[a-zA-z=0-9-\s]*`)

	for _, d := range reg.FindAllString(string(body), -1) {

		fmt.Println("地址收集： ", d)
		urls = append(urls, d)


		// fmt.Print(string(file))

	}
	fmt.Println("\n首次收集网络地址：" ,len(urls))

}
func checkRegexp(cont string, reg string, style int) (result interface{}) {
	check := regexp.MustCompile(reg)
	switch style {
	case 0:
		result = check.FindString(cont)
	case 1:
		result = check.FindAllString(cont, -1)
	default:
		result = check.FindAll([]byte(cont), -1)
	}
	return
}


func Timer() {
	t := time.NewTimer(time.Second * 1)
	<-t.C
	fmt.Print("\n\n\n执行爬抓\n\n")
	Timer()
}

func checkFile(dir string, file string) os.FileInfo {
	list, _ := ioutil.ReadDir(dir)
	for _, info := range list {
		if info.Name() == file {
			return info
		}
	}
	return list[0]
}



